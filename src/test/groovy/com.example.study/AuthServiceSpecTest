package com.example.study

import spock.lang.Specification

class AuthServiceSpecTest extends Specification{
    def USER_PASSWORD = "userPassword"
    def mockUserRepository = Mock(UserRepository.java)
    AuthService authService = new AuthService(mockUserRepository)

    def USER_ID = "userId"
    def WRONG_PASSWORD = "wrongPassword"

    def givenInvalidId_throwIllegalArgEx() {
        assertIllegalArgExThrown(null, USER_PASSWORD)
        assertIllegalArgExThrown("", USER_PASSWORD)
        assertIllegalArgExThrown(USER_ID, null)
        assertIllegalArgExThrown(USER_ID, "")
    }

    def whenUserNotFound_throwNonExistingUserEx(){
        assertExceptionThrown("noUserId", USER_PASSWORD, NonExistingUserException.class)
        assertExceptionThrown("noUserId2", USER_PASSWORD, NonExistingUserException.class)
    }

    def whenUserFoundButWrongPw_throwWrongPasswordEx() {
        givenUserExists(USER_ID, USER_PASSWORD)
        assertExceptionThrown(USER_ID, WRONG_PASSWORD, WrongPasswordException.class)
        verifyUserFound(USER_ID)
    }

    def whenUserFoundAndRightPw_returnAuth(){
        givenUserExists(USER_ID, USER_PASSWORD)
        val auth = authService.authenticate(USER_ID,USER_PASSWORD)
        assertThat(auth.id, equalTo(USER_ID))
    }

    private def givenUserExists(String id, String password) {
        mockUserRepository.findById(id) >> User(id, password)
    }

    private def verifyUserFound(String id) {
        verify(mockUserRepository).findById(id)
    }

    private def assertIllegalArgExThrown(String id, String password) {
        assertExceptionThrown(id, password, IllegalArgumentException.class)
    }

    private def  assertExceptionThrown(String id, String password, Class<? extends Exception> type) {
        Exception thrownEx = null
        try {
            authService.authenticate(id, password)
        } catch (Exception e) {
            thrownEx = e
        }
        assertThat(thrownEx, instanceOf(type))
    }

}